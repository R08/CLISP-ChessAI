


(defclass game_state ()
  ;;; Represents whether or not if each space on the board is ocupied by a piece.
  ((all_pieces :accessor all_pieces :initarg :all_pieces :initform (blank-bb))
   
      
   ;;   Current Game-state: an array type, that holds all the pieces for each 
   ;;   player by name (ex. Wp Bk...) according to thier respective positions
   ;;   on the board. 
   (game_state :accessor game_state :initarg :game_state :initform (make-array 64 :element-type 'string :initial-element "__"))

   ;; Players
   (player1 :accessor player1 :initarg :player1 :initform (new-player1))
   (player2 :accessor player2 :initarg :player2 :initform (new-player2))))




#|---------------------------

     FUNCTION DEFINITIONS

----------------------------|#


;==;Update-all-pieces()
;;;    Desc: Updates all_pieces bitboard to represent all currently held positions.
;;     Calls functions: Update-player-pieces {player}
;;                      clear-bb             {bb-util}
                        
(defmethod update-all-pieces ((gs game_state))
  (clear-bb (all_pieces gs))

  (update-player-pieces (player1 gs))
  (update-player-pieces (player2 gs))

  (loop for i from 0 to 63 do
       (setf (all_pieces gs) (bit-ior (player_pieces (player1 gs))  (player_pieces (player2 gs))))))


;==;Update-game-state()
;;;    Desc:  For both players iterate through each piece's pos bb and for 
;;              each bit that == 1 set the corresponding index of game-state to 
;;              the pieces name.
;;     Calls functions: update-all-pieces  {game}

(defmethod update-game-state ((gs game_state))

  (update-all-pieces gs)

  ;; Player1 (white)
  (loop for i from 0 to 5 do
       (loop for j from 0 to 63 do
	    (if (eq (bit (pos (nth i (pieces (player1 gs)))) j) 1)
		(setf (aref (game_state gs) j) (name (nth i (pieces (player1 gs))))))))

  ;; Player2 (black)
  (loop for i from 0 to 5 do
       (loop for j from 0 to 63 do
	    (if (eq (bit (pos (nth i (pieces (player2 gs)))) j) 1)
		(setf (aref (game_state gs) j) (name (nth i (pieces (player2 gs)))))))))


;==;Clear-game-state()
;;;   Desc: Clear the game-state

(defmethod clear-game-state ((gs game_state))
  (loop for i from 0 to 63 do
       (setf (aref (game_state gs) i) '__)))




;==;Print-game-state()
;;      Desc: Print current game state as a board
;;      Calls Functions: clear-game-state  {game} 
;;                       update-game-state {game}
(defmethod print-game-state ((gs game_state))
  (clear-game-state gs)
  (update-game-state gs)

  (let ((curState (reverse (game_state gs))))
    (loop for i from 0 to 7 do
	 (let ((x))
	   (loop for j from 0 to 7 do
		(setf x (cons (aref curState (+ j (* i 8))) x)))
	   (print x)))))